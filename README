it('[fcTicketTracker - check] - should check fcTicketTracker length greater 16 is invalid', () => {
    let fcTicketTracker = component.formExceptionRepair.controls['fcTicketTracker'];
    expect(fcTicketTracker.valid).toBeFalsy();
    expect(fcTicketTracker.pristine).toBeTruthy();
    expect(fcTicketTracker.hasError('required')).toBeTruthy();
    fcTicketTracker.setValue('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
    expect(fcTicketTracker.hasError('maxlength')).toBeTruthy();
  })

  it('[fcTicketTracker - check] - should check fcTicketTracker length <= 16 is valid', () => {
    let fcTicketTracker = component.formExceptionRepair.controls['fcTicketTracker'];
    expect(fcTicketTracker.valid).toBeFalsy();
    expect(fcTicketTracker.pristine).toBeTruthy();
    expect(fcTicketTracker.hasError('required')).toBeTruthy();
    fcTicketTracker.setValue('AAAAAAAAAA');
    expect(fcTicketTracker.hasError('maxlength')).toBeFalsy();
  })


  it('[fcDBbName - check] - should check fcDBbName is mandatory', () => {
    let fcDBbName = component.formExceptionRepair.controls['fcDBbName'];
    expect(fcDBbName.valid).toBeFalsy();
    expect(fcDBbName.pristine).toBeTruthy();
    expect(fcDBbName.hasError('required')).toBeTruthy();
    fcDBbName.setValue('fcDBbName');
    expect(fcDBbName.hasError('required')).toBeFalsy();
  })

  it('[fcComments - check] - should check fcComments is optional', () => {
    let fcComments = component.formExceptionRepair.controls['fcComments'];
    expect(fcComments.valid).toBeTruthy();
    expect(fcComments.hasError('required')).toBeFalsy();
  })
  
 ## // can you do for other controls as we did three above
 
 
 it('testing subscribe method is getting called', () => {
    let serviceSpy= spyOn(service,'getDbNames').and.returnValue(of(["DbName1","DbName2"]));
    let subSpy= spyOn(service.getDbNames(),'subscribe');

    component.ngOnInit();
    expect(serviceSpy).toHaveBeenCalledBefore(subSpy);
    expect(subSpy).toHaveBeenCalled();
  })

  it('testing execution within subscribe method', () => {

     let serviceSpy= spyOn(service,'getDbNames').and.returnValue(of(["DbName1","DbName2"]));
    expect(component.dbNames.length).toBeGreaterThan(0);
  })

## // can you do for action service as we did for getDbNames



--------------------Audit file---------------------------


## // assuming .btn is the class name of button clicked
it('on SearchExceptionRequest Click - set spinnerExceptionRequest to true', () => {
    let searchExceptionRequestButton = fixture.debugElement.query(By.css('.btn'));
    searchExceptionRequestButton.triggerEventHandler('click', null);
    expect(component.spinnerExceptionRequest).toBe(true);
 })

 it('on SearchRequestTracking Click - set spinnerRequestTracking to true', () => {
  let searchRequestTrackingButton = fixture.debugElement.query(By.css('.btn'));
  searchRequestTrackingButton.triggerEventHandler('click', null);
  expect(component.spinnerRequestTracking).toBe(true);
})



----------- clickSearch --------------------

it('on search click atleast one search creteria required', () => {
  spyOn(component.formAuditReport,'hasError').withArgs('atLeastOneRequired').and.returnValue(true);
  let spyOnMessageService=spyOn(component.messageService,'add');
  let clickSearchBtn = fixture.debugElement.query(By.css('.clickBtn'));
  clickSearchBtn.triggerEventHandler('click', null);
  expect(spyOnMessageService).toHaveBeenCalled();
})


it('on search click - if creteria found get the auditTracking', () => {
  spyOn(component.formAuditReport,'hasError').withArgs('atLeastOneRequired').and.returnValue(false);
  let serviceSpy= spyOn(auditReportServiceObj,'getSearch').and.returnValue(of([{id:'123'},{id:'789'}]));
  let clickSearchBtn = fixture.debugElement.query(By.css('.clickBtn'));
  clickSearchBtn.triggerEventHandler('click', null);
  expect(component.audittrackings.length).toBeGreaterThan(0);
})


------------ onDateRange-----

it('should hide overlay if rangeCalender value at index 1 is not null', () => {
  spyOn(component.rangeCalender,'value').and.returnValue(["01/12/2001","02/12/2001"]);
  expect(component.rangeCalender.overlayVisible).toBe(true);
  component.OnDateRangeSelection();
  expect(component.rangeCalender.overlayVisible).toBe(false);
})

