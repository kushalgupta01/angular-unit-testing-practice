it('[fcTicketTracker - check] - should check fcTicketTracker length greater 16 is invalid', () => {
    let fcTicketTracker = component.formExceptionRepair.controls['fcTicketTracker'];
    expect(fcTicketTracker.valid).toBeFalsy();
    expect(fcTicketTracker.pristine).toBeTruthy();
    expect(fcTicketTracker.hasError('required')).toBeTruthy();
    fcTicketTracker.setValue('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
    expect(fcTicketTracker.hasError('maxlength')).toBeTruthy();
  })

  it('[fcTicketTracker - check] - should check fcTicketTracker length <= 16 is valid', () => {
    let fcTicketTracker = component.formExceptionRepair.controls['fcTicketTracker'];
    expect(fcTicketTracker.valid).toBeFalsy();
    expect(fcTicketTracker.pristine).toBeTruthy();
    expect(fcTicketTracker.hasError('required')).toBeTruthy();
    fcTicketTracker.setValue('AAAAAAAAAA');
    expect(fcTicketTracker.hasError('maxlength')).toBeFalsy();
  })


  it('[fcDBbName - check] - should check fcDBbName is mandatory', () => {
    let fcDBbName = component.formExceptionRepair.controls['fcDBbName'];
    expect(fcDBbName.valid).toBeFalsy();
    expect(fcDBbName.pristine).toBeTruthy();
    expect(fcDBbName.hasError('required')).toBeTruthy();
    fcDBbName.setValue('fcDBbName');
    expect(fcDBbName.hasError('required')).toBeFalsy();
  })

  it('[fcComments - check] - should check fcComments is optional', () => {
    let fcComments = component.formExceptionRepair.controls['fcComments'];
    expect(fcComments.valid).toBeTruthy();
    expect(fcComments.hasError('required')).toBeFalsy();
  })
  
 ## // can you do for other controls as we did three above
 
 
 it('testing subscribe method is getting called', () => {
    let serviceSpy= spyOn(service,'getDbNames').and.returnValue(of(["DbName1","DbName2"]));
    let subSpy= spyOn(service.getDbNames(),'subscribe');

    component.ngOnInit();
    expect(serviceSpy).toHaveBeenCalledBefore(subSpy);
    expect(subSpy).toHaveBeenCalled();
  })

  it('testing execution within subscribe method', () => {

     let serviceSpy= spyOn(service,'getDbNames').and.returnValue(of(["DbName1","DbName2"]));
    expect(component.dbNames.length).toBeGreaterThan(0);
  })

## // can you do for action service as we did for getDbNames
